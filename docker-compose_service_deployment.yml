---
- name: Set up Services using Docker Compose
  hosts: local
  gather_facts: no
  become: true
 
  tasks:
    - name: Create directories if they do not exist
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - /opt/services
        - /opt/services/jenkins
      when:
        - service_name == "jenkins"
    
    - name: Create directories if they do not exist
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - /opt/services
        - /opt/services/gitlab
        - /opt/services/gitlab_home
        - /opt/services/gitlab_home/config
        - /opt/services/gitlab_home/logs
        - /opt/services/gitlab_home/data
        - /opt/services/gitlab_home/gitlab-runner
      when:
        - service_name == "gitlab"
    
    - name: Create directories if they do not exist
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - /opt/services
        - /opt/services/mysql
        - /opt/services/mysql/scripts
        - /opt/services/mysql/master
        - /opt/services/mysql/master/data
        - /opt/services/mysql/slave
        - /opt/services/mysql/slave/data

      when:
        - service_name == "mysql"

    - name: Create directories if they do not exist
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - /opt
        - /opt/services
        - /opt/services/artifactory
      when:
        - service_name == "artifactory"

    - name: Create directories if they do not exist
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - /opt/services
        - /opt/services/mongoDB
      when:
        - service_name == "mongoDB"

    - name: Create directories if they do not exist
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - /opt/services
        - /opt/services/mongo
        # - /opt/services/mongo/master
        # - /opt/services/mongo/master/data
        # - /opt/services/mongo/slave1
        # - /opt/services/mongo/slave1/data
        # - /opt/services/mongo/slave2
        # - /opt/services/mongo/slave2/data
      when:
        - service_name == "mongo"

    - name: Copy other folders to remote server
      copy:
        src: "./services/{{ service_name }}/master/"
        dest: "/opt/services/{{ service_name }}/master/"
      when:
       - service_name == 'mysql'
    
    - name: Copy other folders file to remote server
      copy:
        src: "./services/{{ service_name }}/slave/"
        dest: "/opt/services/{{ service_name }}/slave/"
      when:
       - service_name == 'mysql'
    - name: Copy other file to remote server
      copy:
        src: "./services/{{ service_name }}/scripts/"
        dest: "/opt/services/{{ service_name }}/scripts/"
        mode: "0755"
      when:
       - service_name == 'mysql' or service_name== 'mongo'

    - name: Copy Docker Compose file to remote server
      copy:
        src: "./services/{{ service_name }}/docker-compose.yml"
        dest: "/opt/services/{{ service_name }}/docker-compose.yml"
        mode: '0644'

    - name: Docker compose up
      community.docker.docker_compose:
        project_src: "/opt/services/{{ service_name }}"
        files:
          - docker-compose.yml
    
    - name: Run setup_db.sh script
      shell: "./setup_db.sh"
      args:
        chdir: "/opt/services/{{ service_name }}/scripts"
      when:
       - service_name == 'mysql' #or service_name== 'mongo'

#    - name: Retrieve Jenkins initial admin password
#      become: yes
#      shell: |
#        docker exec jenkins cat /opt/services/jenkins_home/secrets/initialAdminPassword
#      register: initial_admin_password

#    - name: Print Jenkins initial admin password
#      debug:
#        var: initial_admin_password.stdout
 